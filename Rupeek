// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Interface for BEP-20
interface IBEP20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract Rupeek is IBEP20 {
    string public constant name = "Rupeek"; // Token Name
    string public constant symbol = "RUPEEK"; // Token Symbol
    uint8 public constant decimals = 18; // Number of decimal places
    uint256 private _totalSupply; // Total Supply

    mapping(address => uint256) private _balances; // Balance mapping
    mapping(address => mapping(address => uint256)) private _allowances; // Allowances

    // Constructor to initialize the contract with an initial supply
    constructor(uint256 initialSupply) {
        _totalSupply = initialSupply * 10 ** uint256(decimals); // Set the total supply with decimals
        _balances[msg.sender] = _totalSupply; // Assign all tokens to the contract deployer
        emit Transfer(address(0), msg.sender, _totalSupply); // Emit the transfer event for initial supply
    }

    // Total Supply function
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    // Balance Of function
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    // Transfer function
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(_balances[msg.sender] >= amount, "BEP20: transfer amount exceeds balance");

        _balances[msg.sender] -= amount;
        _balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);
        return true;
    }

    // Allowance function
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    // Approve function
    function approve(address spender, uint256 amount) public override returns (bool) {
        require(spender != address(0), "BEP20: approve to the zero address");
        _allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }

    // Transfer From function
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        require(sender != address(0), "BEP20: transfer from the zero address");
        require(recipient != address(0), "BEP20: transfer to the zero address");
        require(_balances[sender] >= amount, "BEP20: transfer amount exceeds balance");
        require(_allowances[sender][msg.sender] >= amount, "BEP20: transfer amount exceeds allowance");

        _balances[sender] -= amount;
        _balances[recipient] += amount;
        _allowances[sender][msg.sender] -= amount;
        emit Transfer(sender, recipient, amount);
        return true;
    }
}
      
